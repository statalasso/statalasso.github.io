<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>PYSTACKED on Stata ML Page</title><link>https://statalasso.github.io/docs/pystacked/</link><description>Recent content in PYSTACKED on Stata ML Page</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://statalasso.github.io/docs/pystacked/index.xml" rel="self" type="application/rss+xml"/><item><title>Getting started</title><link>https://statalasso.github.io/docs/pystacked/getting_started/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://statalasso.github.io/docs/pystacked/getting_started/</guid><description>Getting started # Before we get into stacking, let&amp;rsquo;s first use pystacked as a &amp;ldquo;regular&amp;rdquo; program for machine learning.
Gradient boosting # We load the example data set and split the data in training/test sample.
. clear all . insheet using /// https://statalasso.github.io/dta/housing.csv, /// clear comma . set seed 789 . gen train=rnormal() . replace train=train&amp;gt;.75 As an example, we run pystacked with gradient boosting:
. pystacked medv crim-lstat if train, /// type(regress) pyseed(243) method(gradboost) Single base learner: no stacking done.</description></item><item><title>Regression</title><link>https://statalasso.github.io/docs/pystacked/regression/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://statalasso.github.io/docs/pystacked/regression/</guid><description>Stacking regression # First load the Boston housing data and split the data randomly in training and test sample:
. insheet using /// https://statalasso.github.io/dta/housing.csv, /// clear comma . set seed 789 . gen train=rnormal() . replace train=train&amp;gt;.75 We now consider a more complicated pystacked application with 4 base learners: linear regression, lasso with AIC-chosen penalty, random forest and gradient boosting:
. pystacked medv crim-lstat if train, /// type(regress) pyseed(123) /// methods(ols lassoic lassoic rf gradboost) /// pipe1(poly2) pipe3(poly2) cmdopt5(learning_rate(0.</description></item><item><title>Classification</title><link>https://statalasso.github.io/docs/pystacked/classification/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://statalasso.github.io/docs/pystacked/classification/</guid><description>Stacking classifier # Stacking can be applied in a similar way to classification problems. For demonstration, we consider the Spambase Data Set from the Machine Learning Repository. We load the data and shuffle the observations around since they are ordered by outcome.
. insheet using /// https://archive.ics.uci.edu/ml/machine-learning-databases/spambase/spambase.data, /// clear comma . set seed 42 . gen u = runiform() . sort u Stacking classification works very similar to stacking regression.</description></item><item><title>Parallelization</title><link>https://statalasso.github.io/docs/pystacked/parallel/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://statalasso.github.io/docs/pystacked/parallel/</guid><description>Parallelization # pystacked can be run in parallel, even without a StataMP license.
Here, we use pystacked with njobs(-1) which indicates that we want to use all available CPUs.
. clear all . insheet using /// https://archive.ics.uci.edu/ml/machine-learning-databases/spambase/spambase.data, /// clear comma . set seed 42 . gen u = runiform() . sort u . timer on 1 . pystacked v58 v1-v57, type(class) pyseed(123) methods(rf gradboost nnet) /// cmdopt1(n_estimators(1000)) . timer off 1 .</description></item><item><title>Help file</title><link>https://statalasso.github.io/docs/pystacked/help/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://statalasso.github.io/docs/pystacked/help/</guid><description>---------------------------------------------------------------------------------------------------------------------------------- help pystacked v0.1 ---------------------------------------------------------------------------------------------------------------------------------- Title pystacked -- Stata program for Stacking Regression Overview pystacked implements stacking regression (Wolpert, 1992) via scikit-learn's sklearn.ensemble.StackingRegressor and sklearn.ensemble.StackingClassifier. Stacking is a way of combining predictions from multiple supervised machine learners (the "base learners") into a final prediction to improve performance. The currently-supported base learners are linear regression, logit, lasso, ridge, elastic net, (linear) support vector machines, gradient boosting, and neural nets (MLP). pystacked can also be used with a single base learner and, thus, provides an easy-to-use API for scikit-learn's machine learning algorithms.</description></item><item><title>Installation</title><link>https://statalasso.github.io/docs/pystacked/installation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://statalasso.github.io/docs/pystacked/installation/</guid><description>Installation # You can get the lastest versions from Github:
net install pystacked, /// from(https://raw.githubusercontent.com/aahrens1/pystacked/main) replace Please check for updates on a regular basis.
pystacked requires at least Stata 16 (or higher), a Python installation and scikit-learn (0.24 or higher). Python and scikit-learn are available for free. Setting up Python # If you haven&amp;rsquo;t set up Python for Stata, type help python and check this Stata blog post for how to set up Python for Stata on your system.</description></item><item><title>Citation</title><link>https://statalasso.github.io/docs/pystacked/citation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://statalasso.github.io/docs/pystacked/citation/</guid><description>Citation # pystacked is not an official Stata command. It&amp;rsquo;s a free contributions to the research community, like a paper. Please cite it as such.
Also cite scikit-learn as explained here:
@article{scikit-learn, title={Scikit-learn: Machine Learning in {P}ython}, author={Pedregosa, F. and Varoquaux, G. and Gramfort, A. and Michel, V. and Thirion, B. and Grisel, O. and Blondel, M. and Prettenhofer, P. and Weiss, R. and Dubourg, V. and Vanderplas, J. and Passos, A.</description></item></channel></rss>